---
title: "Tips for Finch and Telemetry"
date: 2020-11-17T17:27:05Z
draft: false
description: "A collection of tips to customize the interaction between Finch and Telemetry"
tags:
  - elixir
  - software development
---

While working on [[https://github.com/fully-forged/tune][Tune]], I needed to collect performance metrics related to the interaction with the Spotify API.

The Finch HTTP client [[https://hexdocs.pm/finch/Finch.html#module-telemetry][exposes Telemetry metrics]], which made it very easy to display them via [[https://hex.pm/packages/phoenix_live_dashboard][Phoenix Live Dashboard]].

Starting from the stock ~TuneWeb.Telemetry~ file generated by Phoenix (see [[https://hexdocs.pm/phoenix/telemetry.html#content][the official guides for an explanation]]), I just added two new summary metrics to the ~metrics/0~ function:

#+begin_src elixir
  summary("vm.total_run_queue_lengths.io"),

  # HTTP
  summary("finch.request.stop.duration", unit: {:native, :millisecond}, tags: [:path]),
  summary("finch.response.stop.duration", unit: {:native, :millisecond}, tags: [:path])
]
#+end_src

With this change in place ([[https://github.com/fully-forged/tune/commit/7c573aa30313a8adf1954076b9cd957f0f910155][commit]]), I had all metrics being visualized in the dashboard, grouped by the Spotify API path. I wanted to make some improvements:

- The ~:path~ tag includes query string parameters, so calls like ~search?q=marillion~ and ~search?q=fish~ would be aggregated in different groups. Instead, I would want them to be part of the same group, ignoring query string parameters.
- Since I [[{{< ref "posts/using-finch-with-sentry.org" >}}][setup Sentry to use Finch as a client]], I wanted to exclude calls made to Sentry and only have charts reporting metrics about the interaction with Spotify

* Aggregating by normalized path

To aggregate metrics by normalized path, we can apply a transformation function to the metric tag values, generate a normalized path tag and use that to aggregate metrics. As shown [[https://hexdocs.pm/telemetry_metrics/Telemetry.Metrics.html#module-metrics][in the telemetry_metrics docs]], the option we need is ~tag_values~:

#+begin_src elixir
def metrics do
  [
    # omitted
    summary("finch.request.stop.duration",
        unit: {:native, :millisecond},
        tags: [:normalized_path],
        tag_values: &add_normalized_path/1
    )
  ]
end

defp add_normalized_path(metadata) do
  Map.put(metadata, :normalized_path, URI.parse(metadata.path).path)
end
#+end_src

We can use the built-in ~URI~ module to parse normalized path out of the Finch metric metadata and add it to the metadata itself. With that in place, we can update the ~tags~ option to reference ~:normalized_path~. With this change, metrics are aggregated on the endpoint only, without any query string. For reference, here's the relevant [[https://github.com/fully-forged/tune/commit/8ab6fab59357e97579ac086a94e768193c2872a5?branch=8ab6fab59357e97579ac086a94e768193c2872a5&diff=unified][commit]].

* Filtering only Spotify calls

To filter for Spotify calls only, we can use the ~keep~ option, which specifies a predicate function that can be used to define which metrics should be kept and which ones should be discarded. Discarded metrics will not appear in the dashboard chart.

#+begin_src elixir
def metrics do
  [
    # omitted
    summary("finch.response.stop.duration",
      unit: {:native, :millisecond},
      tags: [:normalized_path],
      tag_values: &add_normalized_path/1,
      keep: &keep_spotify/1,
      reporter_options: [
        nav: "HTTP - Spotify"
      ]
    )
  ]
end

defp keep_spotify(meta) do
  meta.host =~ "spotify"
end
#+end_src

As the meta information already includes a host, we can compare it with the ~spotify~ string. The ~=~~ operator makes the comparison a bit more resilient, so that we don't have to worry about the exact hostname, rather a hostname related to Spotify. This choice might need to be revised if we ever end up interacting via HTTP with another service with "spotify" in their host name (unlikely, but possible).

For some additional clarity, we can also use the ~nav~ reporter option (see [[https://hexdocs.pm/phoenix_live_dashboard/metrics.html#reporter-options][Phoenix LiveDashboard documentation]] for more details) to make sure that the navigation header displays a name that details the additional filter applied to the HTTP metrics. For reference, see the relevant [[https://github.com/fully-forged/tune/commit/c9f483d93c0813c0e680a4aaf2a88fed0851334f#diff-f599bf85f0cafc16b50f0e1a561b6aa39e4ab256fb6d43e8726619570866c5b1][commit]].

* Conclusion

Both improvements required very small updates. Here's the final result, showing the custom Nav title ("HTTP - Spotify") to hint at the filter used to only show Spotify calls, and aggregation by normalized path (without query string).
  
{{< image src="/img/tips-for-finch-and-telemetry/charts.png" alt="A screenshot of the configured Finch Metrics inside Live Dashboard" >}}

All in all, I was pleased to see that it was straightforward to customise the charts I needed. One thing I haven't worked on yet is aggregating metrics by logical path, i.e. by route (~GET /artist/:id~) instead of individual paths (~GET /artist/123~), but I have some ideas and will come back on it in a future post.
